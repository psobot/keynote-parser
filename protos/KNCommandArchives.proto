syntax = "proto2";

import "TSPMessages.proto";
import "TSKArchives.proto";
import "TSCKArchives.proto";
import "TSSArchives.proto";
import "TSDArchives.proto";
import "TSDArchives_sos.proto";
import "TSDCommandArchives.proto";
import "TSWPArchives.proto";
import "TSAArchives.proto";
import "TSTArchives.proto";
import "KNArchives.proto";
import "KNArchives_sos.proto";
package KN;

enum AnimationReferent {
  kRelativeToStart = 1;
  kRelativeToEnd = 2;
}
message UIStateCommandGroupArchive {
  required .TSK.CommandGroupArchive super = 1;
  required .TSP.Reference uiState = 2;
  required string property = 3;
  repeated .TSP.Reference slideNodesToEdit = 4;
  repeated .TSP.Reference template_slide_nodes_to_apply = 5;
  repeated .TSP.Size thumbnailSizes = 6;
  repeated .TSP.Reference selectedSlideNodes = 7;
  repeated .TSP.Reference restoreSelectedSlideNodes = 8;
}

message CommandSlideInsertDrawablesArchive {
  required .TSK.CommandArchive super = 1;
  required .TSP.UUID slide_id = 2;
  repeated .TSP.Reference drawables = 3;
  repeated .TSP.Reference working_drawables = 18;
  optional .KN.MixedIdOperationArgs args_list = 4;
  required bool update_geometry_to_match_object_placeholder = 5;
  repeated .TSP.UUID ids_of_drawables_using_object_placeholder_geometry = 6;
  repeated string sage_placeholder_tags_list = 7;
  repeated string instructional_text_list = 20;
  optional .TSP.Reference undo_archive = 8;
  optional bool is_pasting = 9;
  repeated .TSP.Reference insert_build_descriptions = 10;
  repeated .TSP.Reference working_insert_build_descriptions = 19;
  repeated .TSP.Reference remove_build_descriptions = 11;
  optional bool remove_slide_specific_hyperlinks = 12;
  repeated .TSP.UUID custom_format_keys = 13;
  optional uint32 saved_next_untitled_resolver_index = 16;
  optional .TSD.GeometryArchive geometry_of_object_placeholder_for_comparison_to_restore_link = 17;
}

message CommandSlideSetPlaceholdersForTagsArchive {
  required .TSK.CommandArchive super = 1;
  required .TSP.UUID slide_id = 2;
  repeated .TSP.Reference infos = 3;
  repeated string tags = 4;
  repeated .TSP.Reference old_infos = 6;
  repeated string old_tags = 5;
}

message CommandTemplateSlideSetPlaceholderForTagArchive {
  required .KN.CommandSlideSetPlaceholdersForTagsArchive super = 1;
  required .TSP.UUID placeholder_id = 2;
  optional string tag = 3;
}

message CommandSlidePropagateSetPlaceholderForTagArchive {
  required .KN.CommandSlideSetPlaceholdersForTagsArchive super = 1;
  required .TSP.UUID placeholder_id = 2;
  required .TSP.UUID original_id = 3;
}

message CommandSlideRemoveDrawableArchive {
  required .TSK.CommandArchive super = 1;
  required .TSP.UUID slide_id = 2;
  repeated .TSP.Reference sortedDrawables = 3;
  required .KN.MixedIdOperationArgs args_list = 4;
  repeated uint32 drawable_indexes_for_undo = 10;
  repeated string placeholderTags = 5;
  repeated string instructional_text_list = 11;
  repeated .TSP.Reference insert_build_descriptions = 6;
  repeated .TSP.Reference remove_build_descriptions = 7;
  repeated .TSP.Reference drawables_using_object_placeholder_geometry = 8;
  repeated .TSP.Reference inverse_insert_hyperlink_commands = 9;
}

message CommandSlideMoveDrawableZOrderArchive {
  required .TSK.CommandArchive super = 1;
  repeated .TSP.Reference old_ordered_infos = 4;
  repeated .TSCK.RearrangeIdOperationArgs args_list = 6;
  required .TSP.UUID slide_id = 7;
  repeated .TSP.Reference old_ordered_infos_on_slide_for_undo = 8;
}

message CommandSlideNodeSetPropertyArchive {
  required .TSK.CommandArchive super = 1;
  required .TSP.UUIDPath slide_node_id_path = 2;
  required string property = 3;
  required bool old_value = 4;
  required bool value = 5;
}

message CommandSlideNodeSetViewStatePropertyArchive {
  required .TSK.CommandArchive super = 1;
  required .TSP.UUIDPath slide_node_id_path = 2;
  required string property = 3;
  required bool old_value = 4;
  required bool value = 5;
}

message CommandSlideSetBackgroundFillArchive {
  required .TSK.CommandArchive super = 1;
  required .TSP.UUIDPath slide_id_path = 2;
  optional .TSD.FillArchive old_fill = 3;
  required .TSD.FillArchive new_fill = 4;
}

message CommandSlideSetStyleArchive {
  required .TSK.CommandArchive super = 1;
  required .TSP.UUIDPath slide_id_path = 2;
  required .TSP.Reference slide_style = 3;
  optional .TSP.Reference old_slide_style = 4;
}

message CommandShowMarkOutOfSyncRecordingArchive {
  required .TSK.CommandArchive super = 1;
  required .TSP.Reference show = 2;
  optional .TSP.Reference old_recording = 3;
  optional bool old_is_recording_out_of_sync = 4 [default = false];
  optional bool new_is_recording_out_of_sync = 5 [default = false];
  optional .TSP.Date old_modification_date = 6;
  optional .TSP.Date new_modification_date = 7;
}

message CommandShowMarkOutOfSyncRecordingIfNeededArchive {
  required .TSK.CommandArchive super = 1;
  optional .TSP.UUID out_of_sync_token = 2;
}

message CommandShowRemoveRecordingArchive {
  required .TSK.CommandArchive super = 1;
  required .TSP.Reference show = 2;
  optional .TSP.Reference old_recording = 3;
}

message CommandShowReplaceRecordingArchive {
  required .TSK.CommandArchive super = 1;
  required .TSP.Reference show = 2;
  required .TSP.Reference replacement_recording = 3;
  optional .TSP.Reference old_recording = 5;
}

message CommandShowSetValueArchive {
  message PropertyValue {
    optional bool bool_value = 1;
    optional double double_value = 2;
    optional .KN.ShowArchive.KNShowMode show_mode_value = 3;
    optional .TSP.Size size_value = 4;
  }

  required .TSK.CommandArchive super = 1;
  required .TSP.Reference show = 2;
  required string property = 3;
  required .KN.CommandShowSetValueArchive.PropertyValue old_value = 4;
  required .KN.CommandShowSetValueArchive.PropertyValue new_value = 5;
}

message CommandShowInsertSlideArchive {
  enum Kind {
    kKindInsertSlide = 0;
    kKindInsertSlideForPaste = 1;
    kKindInsertSlideForDuplicate = 2;
  }
  required .TSK.CommandArchive super = 1;
  repeated .TSP.Reference slide_nodes_being_inserted = 2;
  repeated .TSP.Reference working_slide_nodes_being_inserted = 14;
  repeated .TSCK.AddIdOperationArgs inserted_args_list = 3;
  repeated .TSP.UUID ids_of_slide_nodes_with_depth_changes = 4;
  repeated uint32 depths_of_slide_nodes_with_depth_changes = 5;
  repeated uint32 old_depths_of_slide_nodes_with_depth_changes = 6;
  repeated .TSP.Reference slide_nodes_for_depth_fix_up = 7;
  repeated uint32 depths_of_slide_nodes_for_depth_fix_up = 8;
  repeated uint32 old_depths_of_slide_nodes_for_depth_fix_up = 9;
  optional .KN.CommandShowInsertSlideArchive.Kind kind = 10 [default = kKindInsertSlide];
  repeated .TSP.Reference template_slide_nodes_being_inserted = 11;
  repeated .TSP.UUID custom_format_keys = 12;
  repeated bool collapsed_state_of_slide_nodes_being_inserted = 13;
  optional .TSP.Reference undo_archive = 15;
}

message CommandShowMoveSlideArchive {
  required .TSK.CommandArchive super = 1;
  repeated .TSP.Reference slide_nodes_being_moved_linearly = 2;
  repeated .TSCK.RearrangeIdOperationArgs rearranged_args_list = 3;
  repeated .TSP.UUID ids_of_slide_nodes_with_depth_changes = 4;
  repeated uint32 depths_of_slide_nodes_with_depth_changes = 5;
  repeated uint32 old_depths_of_slide_nodes_with_depth_changes = 6;
  repeated .TSP.Reference slide_nodes_for_depth_fix_up = 7;
  repeated uint32 depths_of_slide_nodes_for_depth_fix_up = 8;
  repeated uint32 old_depths_of_slide_nodes_for_depth_fix_up = 9;
}

message CommandShowRemoveSlideArchive {
  required .TSK.CommandArchive super = 1;
  repeated .TSP.Reference slide_nodes_being_removed = 2;
  repeated .TSCK.RemoveIdOperationArgs removed_args_list = 3;
  repeated .TSP.UUID ids_of_slide_nodes_with_depth_changes = 4;
  repeated uint32 depths_of_slide_nodes_with_depth_changes = 5;
  repeated uint32 old_depths_of_slide_nodes_with_depth_changes = 6;
  repeated .TSP.Reference slide_nodes_for_depth_fix_up = 7;
  repeated uint32 depths_of_slide_nodes_for_depth_fix_up = 8;
  repeated uint32 old_depths_of_slide_nodes_for_depth_fix_up = 9;
  repeated bool collapsed_state_of_slide_nodes_being_removed = 11;
}

message CommandShowChangeThemeArchive {
  message IdentifierToStyleMap {
    repeated .TSS.StylesheetArchive.IdentifiedStyleEntry styles = 1;
  }

  required .TSK.CommandArchive super = 1;
  required .TSP.Reference show = 2;
  required .TSP.Reference theme = 3;
  optional .TSP.Reference old_theme = 4;
  optional string template_identifier = 5;
  optional string old_template_identifier = 6;
  optional .KN.CommandShowChangeThemeArchive.IdentifierToStyleMap identifier_to_style_map = 7;
  optional .KN.CommandShowChangeThemeArchive.IdentifierToStyleMap old_identifier_to_style_map = 8;
}

message CommandShowChangeSlideSizeArchive {
  required .TSK.CommandArchive super = 1;
  required .TSP.Size size = 2;
}

message CommandSetThemeCustomEffectTimingCurveArchive {
  required .TSK.CommandArchive super = 1;
  optional string name = 2;
  optional .TSD.PathSourceArchive path_source = 3;
  optional .TSD.PathSourceArchive old_path_source = 4;
}

message CommandMoveTemplatesArchive {
  required .TSD.ContainerReorderChildrenCommandArchive super = 1;
  repeated .TSP.Reference template_slides = 3;
  repeated .TSP.Reference previous_indexes_keys = 4;
  repeated uint32 previous_indexes_values = 5;
  repeated .TSP.Reference final_template_arrangement = 6;
}

message CommandInsertTemplateArchive {
  required .TSK.CommandArchive super = 1;
  repeated .TSP.Reference undo_template_change_commands = 7;
  required bool set_inserted_slide_as_default_template_slide = 8;
  optional .TSP.Reference undo_replacement_template_slide_node = 9;
}

message CommandPrimitiveInsertTemplateArchive {
  required .TSD.ContainerInsertChildrenCommandArchive super = 1;
  required bool was_inserted_with_drop = 2;
  repeated .TSP.UUID custom_format_keys = 3;
  repeated .TSP.Reference previous_classic_theme_records = 4;
}

message CommandRemoveTemplateArchive {
  required .TSK.CommandArchive super = 1;
  optional .TSP.Reference replacement_template_slide_node = 5;
  repeated .TSP.Reference template_change_commands = 6;
  optional bool default_template_slide_node_was_replaced = 7;
}

message CommandPrimitiveRemoveTemplateArchive {
  required .TSD.ContainerRemoveChildrenCommandArchive super = 1;
  repeated .TSP.Reference previous_classic_theme_records = 3;
}

message CommandSlideInsertBuildArchive {
  required .TSK.CommandArchive super = 1;
  required .TSP.Reference insert_build_description = 2;
  optional .KN.BuildChunkIdentifierArchive identifier_for_chunk_to_insert_after = 3;
  optional bool should_create_chunks = 4;
  repeated .TSP.Reference old_tuples_to_update = 5;
  optional bool was_initialized_over_the_wire = 6;
  optional bool has_been_committed = 7;
}

message InsertBuildDescriptionArchive {
  required .TSP.UUID slide_id = 1;
  required .TSP.Reference build_to_insert = 2;
  repeated .TSP.Reference chunks_to_insert = 3;
  required bool should_assign_chunk_identifiers = 4;
  repeated .KN.BuildChunkIdentifierArchive identifers_for_chunks_to_insert_after = 5;
  repeated .TSP.Reference tuples_to_update = 6;
  repeated .KN.BuildChunkIdentifierArchive fallback_chunk_identifiers = 7;
  required bool is_for_paste = 8;
}

message UndoObjectArchive {
  required .TSD.UndoObjectArchive super = 1;
}

message CommandSlideRemoveBuildArchive {
  required .TSK.CommandArchive super = 1;
  required .TSP.Reference remove_build_description = 2;
  optional .TSP.Reference build = 3;
  repeated .TSP.Reference chunks_to_insert = 4;
  repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_insert_after = 5;
  repeated .TSP.Reference old_tuples_to_update = 6;
  repeated .KN.BuildChunkIdentifierArchive fallback_chunk_identifiers = 7;
}

message RemoveBuildDescriptionArchive {
  optional .TSP.UUID slide_id = 1;
  optional .TSP.UUID build_id = 2;
  optional bool should_remove_chunks = 3;
  optional bool should_remove_chunk_identifiers = 4;
  repeated .TSP.Reference tuples_to_update = 5;
}

message CommandSlideInsertBuildChunkArchive {
  required .TSK.CommandArchive super = 1;
  required .TSP.UUID slide_id = 2;
  required .TSP.Reference chunk_to_insert = 3;
  optional .KN.BuildChunkIdentifierArchive identifier_for_chunk_to_insert_after = 4;
  repeated .TSP.Reference tuples_to_update = 5;
  repeated .TSP.Reference old_tuples_to_update = 6;
  optional bool needs_selection_update = 7;
  optional bool should_assign_chunk_identifier = 8;
}

message CommandSlideRemoveBuildChunkArchive {
  required .TSK.CommandArchive super = 1;
  required .TSP.UUID slide_id = 2;
  optional .TSP.Reference removed_chunk = 3;
  optional .KN.BuildChunkIdentifierArchive identifier_for_chunk_to_remove = 4;
  optional .KN.BuildChunkIdentifierArchive identifier_for_chunk_to_insert_after = 5;
  repeated .TSP.Reference tuples_to_update = 6;
  repeated .TSP.Reference old_tuples_to_update = 7;
  optional bool needs_selection_update = 8;
}

message CommandSlideMoveBuildChunksArchive {
  required .TSK.CommandArchive super = 1;
  repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_move = 2;
  repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_move_after = 3;
  repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_move_after_for_undo = 4;
  repeated .TSP.Reference tuples_to_update = 5;
  repeated .TSP.Reference old_tuples_to_update = 6;
  repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_move_including_clustered_inactive_chunks = 7;
}

message CommandBuildSetValueArchive {
  required .TSK.CommandArchive super = 1;
  optional .TSP.Reference tuple = 2;
  repeated .TSP.Reference chunks_to_add = 3;
  repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_insert_after = 4;
  repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_remove = 5;
  repeated .TSP.Reference tuples_to_update = 6;
  optional .TSP.Reference old_tuple_for_main_property = 7;
  repeated .TSP.Reference old_tuples_to_update_for_sub_commands = 8;
  repeated .KN.BuildChunkIdentifierArchive identifiers_for_added_chunks = 9;
  repeated .KN.BuildChunkIdentifierArchive generated_identifiers = 10;
  repeated .TSP.Reference removed_chunks = 11;
  repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_prior_to_removed_chunks = 12;
  optional uint32 old_chunk_ID_seed = 13;
  repeated .KN.BuildChunkIdentifierArchive old_chunk_identifiers = 14;
  repeated .TSP.Reference chunks_removed_during_undo = 15;
}

message CommandBuildUpdateChunkReferentsArchive {
  required .TSK.CommandArchive super = 1;
  required .TSP.UUID build_id = 2;
  repeated .TSP.Reference tuples_to_update = 3;
  repeated .TSP.Reference old_tuples_to_update = 4;
}

message CommandBuildUpdateChunkCountArchive {
  required .TSK.CommandArchive super = 1;
  required .TSP.UUID slide_id = 2;
  repeated .TSP.UUID drawable_ids = 3;
  repeated .TSP.Reference expected_delivery_style_tuples = 4;
  repeated .TSP.Reference chunks_to_add = 5;
  repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_insert_after = 6;
  repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_to_remove = 7;
  repeated .TSP.Reference tuples_to_update = 8;
  optional bool needs_async_process_changes_selection_update = 9;
  repeated .TSP.Reference old_tuples_to_update = 10;
  repeated .KN.BuildChunkIdentifierArchive identifiers_for_added_chunks = 11;
  repeated .KN.BuildChunkIdentifierArchive generated_identifiers = 12;
  repeated .TSP.Reference removed_chunks = 13;
  repeated .KN.BuildChunkIdentifierArchive identifiers_for_chunks_prior_to_removed_chunks = 14;
  repeated .TSP.Reference old_delivery_style_tuples = 15;
  repeated uint32 old_chunk_ID_seeds = 16;
  repeated .KN.BuildChunkIdentifierArchive old_chunk_identifiers = 17;
  repeated .TSP.Reference working_builds = 18;
  repeated .TSP.Reference chunks_removed_during_undo = 19;
  repeated .TSP.Reference chunks_added_during_undo = 20;
}

message CommandBuildChunkSetValueArchive {
  required .TSK.CommandArchive super = 1;
  repeated .TSP.Reference tuples_to_update = 2;
  repeated .TSP.Reference old_tuples_to_update = 3;
}

message CommandTransitionSetValueArchive {
  required .TSK.CommandArchive super = 1;
  required .TSP.UUIDPath slide_node_id_path = 2;
  optional .KN.TransitionAttributesArchive old_attributes = 3;
  optional .KN.TransitionAttributesArchive attributes = 4;
  optional string property = 5;
}

message CommandShowSetSlideNumberVisibilityArchive {
  required .TSK.CommandArchive super = 1;
  required bool slide_numbers_visible = 3;
  repeated .TSP.UUID ids_of_slide_nodes_to_skip = 4;
  repeated .TSP.UUID ids_of_slide_nodes_already_correct = 5;
  required bool is_undo = 6;
}

message CommandTemplateSetThumbnailTextArchive {
  required .TSK.CommandArchive super = 1;
  required .TSP.UUID template_id = 2;
  required bool is_body = 3;
  optional string new_text = 4;
  optional string old_text = 5;
}

message CommandTemplateSetBodyStylesArchive {
  required .TSK.CommandArchive super = 1;
  required .TSP.UUID template_id = 2;
  repeated .TSP.Reference new_paragraph_styles = 3;
  repeated .TSP.Reference new_list_styles = 4;
  repeated .TSP.Reference old_paragraph_styles = 5;
  repeated .TSP.Reference old_list_styles = 6;
}

message CommandChangeTemplateSlideArchive {
  required .TSK.CommandArchive super = 1;
  required .TSP.UUIDPath slide_id_path = 2;
  required .TSP.Reference template_slide_node = 3;
  optional .TSP.Reference old_template_slide_node = 4;
  required bool is_undo_redo = 5;
  optional .TSP.Reference target_prototype = 6;
}

message CommandSlidePrimitiveSetTemplateArchive {
  required .TSK.CommandArchive super = 1;
  required .TSP.UUIDPath slide_id_path = 2;
  required .TSP.UUID template_id = 3;
  optional .TSP.Reference old_template_slide_node = 4;
}

message CommandSlideResetTemplateBackgroundObjectsArchive {
  required .TSK.CommandArchive super = 1;
  optional .TSP.UUIDPath slide_id_path = 2;
}

message CommandShowSetSoundtrack {
  required .TSK.CommandArchive super = 1;
  optional .TSP.Reference show = 2;
  optional .TSP.Reference soundtrack = 3;
  optional .TSP.Reference old_soundtrack = 4;
}

message CommandSoundtrackSetValue {
  message PropertyValue {
    optional double double_value = 1;
    optional .KN.Soundtrack.SoundtrackMode mode_value = 2;
    repeated .TSP.DataReference media_reference_values = 3;
  }

  required .TSK.CommandArchive super = 1;
  optional .TSP.UUID soundtrack_id = 2;
  optional string property = 3;
  optional .KN.CommandSoundtrackSetValue.PropertyValue old_value = 4;
  optional .KN.CommandSoundtrackSetValue.PropertyValue new_value = 5;
}

message CommandSlideUpdateTemplateDrawables {
  required .TSK.CommandArchive super = 1;
  required .TSP.UUID slide_id = 2;
  repeated .TSCK.IdPlacementOperationArgs id_placement_operation_args = 3;
  repeated .TSP.Reference old_child_infos_for_undo = 4;
}

message ChartInfoGeometryCommandArchive {
  required .TSD.InfoGeometryCommandArchive super = 1;
  required .TSP.Point previous_legend_offset = 2;
  required .TSP.Size previous_legend_size = 3;
  required .TSP.Point adjusted_legend_offset = 4;
  required .TSP.Size adjusted_legend_size = 5;
}

message CanvasSelectionTransformerArchive {
  required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
  repeated .KN.BuildChunkIdentifierArchive build_chunk_ids = 2;
  repeated .TSP.UUID action_build_ids = 3;
  repeated .TSP.UUID originally_selected_drawable_uuids = 4;
}

message ActionGhostSelectionTransformerArchive {
}

message DocumentSelectionTransformerArchive {
  required .TSP.Reference document_selection = 1;
}

message NoteCanvasSelectionTransformerArchive {
  required .TSD.InfoCollectionSelectionTransformerHelperArchive transformer_helper = 1;
}

message OutlineCanvasSelectionTransformerArchive {
  required .TSP.Reference canvas_selection_transformer = 1;
  optional .TSP.UUIDPath storage_uuid_path = 2;
}

message SlideCollectionSelectionTransformerHelperArchive {
  repeated .TSP.UUIDPath slide_nodes = 1;
  optional .TSP.UUIDPath slide_node_to_edit = 2;
  optional bool slide_collection_is_theme = 3 [default = false];
  optional uint32 previous_primary_selected_index = 4;
}

message SlideCollectionSelectionTransformerArchive {
  required .KN.SlideCollectionSelectionTransformerHelperArchive transformer_helper = 1;
}

message OutlineSelectionTransformerArchive {
  required .KN.SlideCollectionSelectionTransformerHelperArchive transformer_helper = 1;
  optional bool can_have_range_in_selected_paragraph = 2 [default = false];
  repeated .TSK.RangeAddress selection_range_addresses = 3;
}

message CommandLiveVideoInfoApplyPreset {
  required .TSD.BaseApplyPresetCommandArchive super = 1;
}

message CommandLiveVideoInfoSetSource {
  required .TSK.CommandArchive super = 1;
  required .TSP.UUIDPath live_video_info_id_path = 2;
  optional .TSP.UUID source_id = 3;
  optional .TSP.UUID local_collaboration_command_usage_token = 4;
  optional .KN.LiveVideoSourceCollaborationCommandUsageState working_source_old_collaboration_command_usage_state = 5;
  optional .TSP.Reference old_source = 6;
  optional .TSP.UUID old_source_id = 7;
}

message CommandLiveVideoInfoSetValue {
  enum Property {
    Scale = 0;
    NormalizedOffset = 1;
    MaskKind = 2;
    MaskCornerRadius = 3;
    IsPlaceholder = 4;
    BackgroundKind = 5;
    BackgroundFill = 6;
  }
  message PropertyValue {
    optional double scale = 1;
    optional .TSP.Point normalized_offset = 2;
    optional int32 mask_kind = 3;
    optional double mask_corner_radius = 4;
    optional bool is_placeholder = 5;
    optional int32 background_kind = 6;
    optional .TSD.FillArchive background_fill = 7;
  }

  required .TSK.CommandArchive super = 1;
  required .TSP.UUIDPath live_video_info_id_path = 2;
  required .KN.CommandLiveVideoInfoSetValue.Property property = 3;
  optional .KN.CommandLiveVideoInfoSetValue.PropertyValue value = 4;
  optional .KN.CommandLiveVideoInfoSetValue.PropertyValue old_value = 5;
}

message CommandLiveVideoSourceSetValue {
  enum Property {
    SourceName = 0;
    CaptureDeviceDescription = 1;
    PosterImageData = 2;
    SymbolAbbreviationText = 3;
    SymbolImageIdentifier = 4;
    SymbolTintColorIdentifier = 5;
  }
  message PropertyValue {
    optional string name = 1;
    optional .KN.LiveVideoCaptureDeviceDescription capture_device_description = 2;
    optional .TSP.DataReference poster_image_data = 3;
    optional string symbol_abbreviation_text = 4;
    optional int32 symbol_image_identifier = 5;
    optional int32 symbol_tint_color_identifier = 6;
  }

  required .TSK.CommandArchive super = 1;
  required .TSP.UUID live_video_source_id = 2;
  required .KN.CommandLiveVideoSourceSetValue.Property property = 3;
  optional .KN.CommandLiveVideoSourceSetValue.PropertyValue value = 4;
  optional .KN.CommandLiveVideoSourceSetValue.PropertyValue old_value = 5;
}

message CommandLiveVideoStyleSetValue {
  required .TSD.BaseStyleSetValueCommandArchive super = 1;
  optional .TSDSOS.MediaStylePropertyChangeSetArchive change = 2;
}

message CommandThemeAddLiveVideoSource {
  required .TSK.CommandArchive super = 1;
  optional .TSP.Reference live_video_source = 2;
  optional bool is_implicit = 3;
}

message CommandThemeRemoveLiveVideoSource {
  required .TSK.CommandArchive super = 1;
  required .TSP.UUID live_video_source_id = 2;
  optional bool is_implicit = 3;
  optional .TSP.Reference removed_live_video_source = 4;
}

message CommandMotionBackgroundStyleSetValueArchive {
  required .TSK.CommandArchive super = 1;
  required .TSP.UUIDPath slide_id_path = 4;
  optional .TSP.Reference old_style = 2;
  optional .TSP.Reference old_slide_style = 5;
  optional .KNSOS.MotionBackgroundStylePropertyChangeSetArchive change = 3;
  optional .KNSOS.MotionBackgroundStylePropertyChangeSetArchive undo_property_change = 6;
}

message CommandMotionBackgroundStyleUpdatePosterFrameDataArchive {
  required .TSK.CommandArchive super = 1;
  optional .TSP.Reference motion_background_style = 2;
  optional .TSP.DataReference poster_image_data = 3;
  optional .TSP.DataReference old_poster_image_data = 4;
}
